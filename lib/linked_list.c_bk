#include <stdio.h>
#include <stdlib.h>

#include "linked_list.h"
#include "error_codes.h"


node_t * get_new_node(int data){
	node_t *new_node = (node_t *) malloc (sizeof(node_t));
	if(!new_node)
		return (node_t *)FAILURE;
	new_node->data = data;
	new_node->next = NULL;
	return new_node;
}
//Using Single Pointer
#if 0
int insert(node_t *root, int data){
	node_t *new_node, *temp;
	new_node = get_new_node(data);
	if( root == NULL){
		printf("\nroot is null\n");
		root = new_node;
		return SUCCESS;
	}
	
	else {
		//printf("\nin else condition\n");
		temp = root;
		while( temp->next != NULL) {
		//	printf("\nTraverse till the last node temp->data \n");
			temp = temp->next;
		}
		temp->next = new_node;
	}
	return SUCCESS;
}
#endif
//Using Double pointers
#if 1
int insert(node_t **root, int data) {
	
	node_t *new_node, **curr;
	curr = root;
	new_node = get_new_node(data);

	//printf("\nAddress of new_node = %p\n",new_node);	
// Note: Insert at the end
#if 10
	if( *curr == NULL){
		*curr= new_node;
		return SUCCESS;
	}
	while((*curr)){
		//printf("\ncurr = %p\n",curr);
		//printf("\n*(curr)->next = %p\n",(*curr)->next);
		//printf("\n&(*curr)->next = %p\n",&(*curr)->next);
		curr = &(*curr)->next;
	}
	new_node->next = *curr;
	*curr = new_node;
	return SUCCESS;
#endif

// Insert at the beginning
#if 0	
	if( *curr == NULL){
		*curr= new_node;
		return SUCCESS;
	}
	else{
		
		new_node->next = (*curr);	
	}	*curr = new_node;

/*Adjust Pointers*/
	return SUCCESS;
#endif
// Note: Insert at the end
#if 0
	if( *root == NULL){
		*root= new_node;
		return SUCCESS;
	}
	
	curr = root;
	
	while((*curr)->next != NULL){
		*curr = (*curr)->next;
	}
	(*curr)->next = new_node;

	return SUCCESS;
#endif
}

#endif

void traverse_ll (node_t **root){
	node_t **curr;
	curr = root;
///	printf("\nTraversing\n");
	while(*curr){
		printf("%d -> ",(*curr)->data);
		curr = &(*curr)->next;
	}
	printf("NULL\n");
}
